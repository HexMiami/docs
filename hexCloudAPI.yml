openapi: 3.0.0
info:
  version: 0.1.0
  title: hexOneCloudAPI
servers:
  - url: "http://localhost:8080/"
paths:
  /get_user_info:
    get:
      description: "Get the user info (id, name, level)"
      operationId: getUserInfo
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: object

  /stations:
    get:
      description: "Gets all a users stations"
      operationId: getStations
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Station"
  /stations_production_history:
    get:
      description: "Gets all a users stations production history"
      operationId: getStationsProductionHistory
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/StationProdHistory"
  /stations/swap_counts:
    get:
      description: "Gets swap counts"
      operationId: getSwapCounts
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/SwapCount"
  /stations/total_swaps:
    get:
      description: "Gets total swaps across all Hextronics stations"
      operationId: getTotalSwaps
      security:
        - bearerAuth: []
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: object
  /station/{id}:
    get:
      description: "Gets a specific station"
      operationId: getStation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Station"
    put:
      description: "Update a specific station"
      operationId: putStation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StationUpdatePayload"
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Station"
    delete:
      description: "Delete a specific station"
      operationId: deleteStation
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Station"
  /checkStationBattHistory/{id}:
    get:
      description: "Check if specific station battery history exists"
      operationId: checkStationBatteryData
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: string

  /latestStationBattHistory/{id}:
    get:
      description: "Get latest specific station battery history"
      operationId: getLatestStationBatteryData
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: object
                # items:
                #   type: object
                # $ref: "#/components/schemas/StationBatteryHistory"

  /stationBattHistory/{id}:
    post:
      description: "Create a new station battery data history"
      operationId: postStationBatteryData
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: string
    get:
      description: "Get a specific station battery history"
      operationId: getStationBatteryData
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: object
    put:
      description: "Update a specific station battery history"
      operationId: putStationBatteryData
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: object
  /checkStationActHistory/{id}:
    get:
      description: "Check if specific station activity history exists"
      operationId: checkStationActivityData
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: string
  /latestStationActHistory/{id}:
    get:
      description: "Get latest specific station activity history"
      operationId: getLatestStationActivityData
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: object
  /stationActHistory/{id}:
    post:
      description: "Create a new station activity data history"
      operationId: postStationActivityData
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: string
    get:
      description: "Get a specific station activity history"
      operationId: getStationActivityData
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: object
    put:
      description: "Update a specific station activity history"
      operationId: putStationActivityData
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: object
  /checkStationErrorHistory/{id}/{jobId}:
    get:
      description: "Check a specific station error history"
      operationId: checkStationErrorLog
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
        - in: path
          name: jobId
          description: "jobId of error"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: string
  /getLatestUnresolvedErrorLog/{id}:
    get:
      description: "Get a specific station latest unresolved error log"
      operationId: getLatestUnresolvedErrorLog
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: object
  /getStationFullErrorLogs/{id}:
    get:
      description: "Get all error logs for a specific station"
      operationId: getStationFullErrorLogs
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: object
  /stationErrorHistory/{id}:
    post:
      description: "Create a new station error data history"
      operationId: postStationErrorLog
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: string
    put:
      description: "Update the error logs for the station"
      operationId: putStationErrorLog
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: string
    # get:
    #   description: "Get a specific station error history"
    #   operationId: getStationErrorLog
    #   security:
    #     - bearerAuth: []
    #   parameters:
    #     - in: path
    #       name: id
    #       description: "Id of the station"
    #       required: true
    #       schema:
    #         type: string
    #   responses:
    #     "200":
    #       description: "TODO"
    #       content:
    #         application/json:
    #           schema:
    #             type: object
    # put:
    #   description: "Update a specific station activity history"
    #   operationId: putStationActivityData
    #   security:
    #     - bearerAuth: []
    #   parameters:
    #     - in: path
    #       name: id
    #       description: "Id of the station"
    #       required: true
    #       schema:
    #         type: string
    #   requestBody:
    #     required: true
    #     content:
    #       application/json:
    #         schema:
    #           type: object
    #   responses:
    #     "200":
    #       description: "TODO"
    #       content:
    #         application/json:
    #           schema:
    #             type: object
  /station:
    post:
      description: "Create a new station"
      operationId: postStation
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StationNewPayload"
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: object
  /station/{id}/{rest}:
    get:
      description: "Authenticate to box and return data"
      operationId: getStationData
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
        - in: path
          name: rest
          description: "Rest of route"
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: object
    post:
      description: "Authenticate to box and post content"
      operationId: postStationContent
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
        - in: path
          name: rest
          description: "Rest of route"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StationInteractPayload"
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: object
    put:
      description: "Authenticate to box and updates content"
      operationId: putStationContent
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          description: "Id of the station"
          required: true
          schema:
            type: string
        - in: path
          name: rest
          description: "Rest of route"
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/StationInteractPayload"
      responses:
        "200":
          description: "TODO"
          content:
            application/json:
              schema:
                type: object
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    StationNewPayload:
      type: object
      properties:
        name:
          type: string
          example: "hexone-abc0def0"
        description:
          type: string
          example: "South of Barn"
        productionHistory:
          type: array
          items:
            $ref: "#/components/schemas/ProductionStatus"
        password:
          type: string
          example: "password"
    StationUpdatePayload:
      type: object
      properties:
        name:
          type: string
          example: "hexone-abc0def0"
        description:
          type: string
          example: "South of Barn"
        productionStatus:
          $ref: "#/components/schemas/ProductionStatus"
        password:
          type: string
          example: "password"
        newpassword:
          type: string
          example: "new password"
        lastOnlineStatus:
          type: boolean
          example: false
        lastTelemetry:
          type: object
        lastOnlineCheck:
          type: number
        lastTelemetryCheck:
          type: number
    StationInteractPayload:
      type: object
      properties:
        content:
          type: object
    SwapCount:
      type: object
      required:
        - stationName
        - owner
        - lastSwapCount
      properties:
        stationName:
          type: string
        owner:
          type: string
        lastSwapCount:
          type: number
    Station:
      type: object
      required:
        - _id
        - owner
        - name
        - lastOnlineStatus
        - lastTelemetry
      properties:
        _id:
          $ref: "#/components/schemas/ID"
        owner:
          type: string
          description: the user id of the owner (auth0)
        name:
          type: string
          example: "hexone-abc0def0"
        description:
          type: string
          example: "South of Barn"
        prodStatus:
          type: string
        lastOnlineStatus:
          type: boolean
          example: false
        lastOnlineCheck:
          type: number
        lastTelemetry:
          type: object
          properties:
            data:
              $ref: "#/components/schemas/TelemetryResponse"
            status:
              type: number
        lastTelemetryCheck:
          type: number
    # StationBatteryHistory:
    #   type: object
    #   # required:
    #   #   - stationName
    #   #   - owner
    #   #   - lastSwapCount
    #   properties:
    #     lastTimeUpdated:
    #       type: number
    #     stationId:
    #       type: string
    #     batteryHistory:
    #       type: array
    StationProdHistory:
      type: object
      required:
        - _id
        - stationId
        - productionHistory
      properties:
        _id:
          $ref: "#/components/schemas/ID"
        stationId:
          type: string
        productionHistory:
          type: array
          items:
            $ref: "#/components/schemas/ProductionStatus"
    ID:
      type: string
    ProductionStatus:
      type: object
      required:
        - stage
      properties:
        stage:
          type: string
        agent:
          type: string
        date:
          type: string
    TelemetryResponse:
      type: object
      properties:
        status:
          type: object
          required:
            - operation
            - system
            - door
            - pad
            - internal_temperature
            - swaps_performed
            - location
            # - version
          properties:
            operation:
              type: boolean
            system:
              type: string
            door:
              type: string
              enum: [open, closed]
            pad:
              type: string
              enum: [empty, occupied]
            internal_temperature:
              type: number
            cooler_state:
              type: string
            heater_state:
              type: string
            swaps_performed:
              type: integer
            location:
              type: array
              items:
                type: number
              description: Coordinates [lat, lon]
            location_data:
              type: object
            station_uptime:
              type: number
            network:
              type: string
              description: Network Speed Test
            gps_location:
              type: string
            version:
              type: string
            weather_temp:
              type: number
            weather_wind:
              type: number
            weather_humidity:
              type: number
            weather_pressure:
              type: number
            weather_precipitation:
              type: number
        battery_info:
          type: object
          required:
            - batteries
            - current_battery
            - next_battery
          properties:
            batteries:
              type: array
              items:
                $ref: "#/components/schemas/BatteryStatus"
            current_battery:
              type: integer
            next_battery:
              type: integer
        toggles:
          type: array
          items:
            $ref: "#/components/schemas/BatteryStatus"
          description: "power status of toggles (odroid, rc, fans)"
        lights:
          type: array
          items:
            $ref: "#/components/schemas/LightStatus"
        climate:
          type: array
          items:
            $ref: "#/components/schemas/ClimateStatus"
        motors:
          type: array
          items:
            $ref: "#/components/schemas/MotorStatus"
        error_message:
          type: string
          example: "Drone is in the bathroom"
        time:
          type: number
    BatteryStatus:
      type: object
      required:
        - name
        - voltage
        - current
        - on_off
      properties:
        name:
          type: string
        voltage:
          type: number
        current:
          type: number
        on_off:
          type: string
          enum: [ON, OFF]
        # status:
        #   type: string
        #   enum: [healthy, warning, unusable, empty]
    LightStatus:
      type: object
      required:
        - port
        - name
        - status
        # - pwm_color
        # - pwm_power
      properties:
        port:
          type: string
        name:
          type: string
        status:
          type: string
        # pwm_color:
        #   type: number
        # pwm_power:
        #   type: number
    ClimateStatus:
      type: object
      required:
        - port
        - name
        - status
        - gates
      properties:
        port:
          type: string
        name:
          type: string
        status:
          type: string
        gates:
          type: array
          items:
            type: integer
    MotorStatus:
      type: object
      required:
        - port
        - name
        - status
        - position
        - encoder
        - power
      properties:
        port:
          type: string
        name:
          type: string
        status:
          type: string
        position:
          type: number
        encoder:
          type: number
        power:
          type: number
